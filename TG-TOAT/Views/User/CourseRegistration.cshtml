@model TGTOAT.Models.CourseRegisterViewModel

@{
    ViewData["Title"] = "Course Registration";
    Layout = "~/Views/Shared/_StudentLayout.cshtml";
}

<h1>Course Registration</h1>

@if (ViewBag.ErrorMessage != null)
{
    <div class="alert alert-danger">
        @ViewBag.ErrorMessage
    </div>
}

@if (ViewBag.SuccessMessage != null)
{
    <div class="alert alert-success">
        @ViewBag.SuccessMessage
    </div>
}


<form method="get" asp-action="FilterCourses">
    <div class="row mb-3">
        <div class="col">
            <div class="form-group">
                <label for="departmentSelect">Select Department:</label>
                <select asp-for="DepartmentId" class="form-control" id="departmentId" name="DepartmentId">
                    <!-- Fixed name to match model -->
                    <option value="">All Departments</option> <!-- This allows departmentId to be null -->
                    @foreach (var department in Model.Departments)
                    {
                        <option value="@department.DepartmentId">@department.DepartmentName</option>
                    }
                </select>
            </div>
        </div>
        <div class="col">
            <div class="form-group">
                <label for="searchTerm">Search For Courses:</label>
                <div class="input-group">
                    <input type="text" class="form-control" id="searchTerm" placeholder="Search for courses..." value="@Context.Request.Query["searchTerm"]" name="searchTerm" />
                    <div class="input-group-append">
                        <button class="btn btn-primary" type="submit">Search</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>


<table class="table">
    <thead>
        <tr>
            <th>Course Number</th>
            <th>Course Name</th>
            <th>Credits</th>
            <th>Instructor</th>
            <th>Days</th>
            <th>Time</th>
            <th>Location</th>
            <th>Selection</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var course in Model.Courses) // Corrected line
        {
            <tr>
                <td>@course.CourseNumber</td>
                <td>@course.CourseName</td>
                <td>@course.NumberOfCredits</td>
       
                <td>
                        @if (Model.Instructors != null && Model.Instructors.Any())
                        {
                            // Get the CourseId for the current course
                            var courseId = course.CourseId;

                            // Filter instructors based on UserCourseConnections
                            var courseInstructors = Model.InstructorCourseConnections
                            .Where(uc => uc.CourseId == courseId)
                            .Select(uc => Model.Instructors.FirstOrDefault(i => i.Id == uc.InstructorID))
                            .Where(i => i != null) // Ensure that we only include valid instructors
                            .ToList();

                            if (courseInstructors.Any())
                            {
                            <ul>
                                    @foreach (var instructor in courseInstructors)
                                    {
                                        @instructor.FirstName @instructor.LastName
                                    }
                            </ul>
                            }
                            else
                            {
                            <span>No instructors assigned</span>
                            }
                        }
                        else
                        {
                        <span>No instructors assigned</span>
                        }
                </td>
           
                <td>@course.DaysOfTheWeek</td>
                <td>
                    @(course.StartTime?.ToString("hh:mm tt") ?? "N/A") - @(course.EndTime?.ToString("hh:mm tt") ?? "N/A")
                </td>
                <td>@course.RoomNumber</td>
                <td>
                    @{
                        // Assuming you have the current student ID accessible in your view.
                        var currentStudentId = Model.CurrentStudent; // Adjust as necessary _auth.GetCurrentUserId();
                        var isRegistered = Model.StudentCourseConnection
                        .Any(conn => conn.StudentID == currentStudentId && conn.CourseId == course.CourseId);
                    }

                    <div class="row">
                        <div class="col-auto">
                            @if (!isRegistered) // Show the Register button if not registered
                            {
                                <form id="registerForm" method="post" asp-action="Register">
                                    <input type="hidden" name="CourseId" value="@course.CourseId" />
                                    <button type="submit" class="btn btn-primary" id="registerBtn">Register</button>
                                </form>
                            }
                            else // Show the Drop button if registered
                            {
                                <div id="dropContainer">
                                    <form id="dropForm" method="post" asp-action="Drop">
                                        <input type="hidden" name="CourseId" value="@course.CourseId" />
                                        <button type="submit" class="btn btn-danger" id="dropBtn">Drop</button>
                                    </form>
                                </div>
                            }
                        </div>
                    </div>
                </td>
               
            </tr>
        }
    </tbody>
</table>

<script src="~/js/account.js" asp-append-version="true"></script>